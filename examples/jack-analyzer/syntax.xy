class /class/ {text}
primType /boolean|char|int/ {text}

propType /field|static/ {text}

methodCategory /constructor|function|method/ {text}

if /if/ {text}
do /do/ {text}
while /while/ {text}
let /let/ {text}
return /return/ {text}

else /else/ {text}

void /void/ {text}
var /var/ {text}

primVal /this|null|true|false/ {text}

identifier /[a-zA-Z_][0-9a-zA-Z_]*/ {text}
integerConstant /[0-9]+/ {int(text)}
stringConstant /"[^"]*"/ {text[1:-1]}
lb /\{/ {text}
rb /\}/ {text}
binOp /[\|&><\*\+\/]/ {text}
equals /=/ {text}
minus /\-/ {text}
not /~/ {text}
lp /\(/ {text}
rp /\)/ {text}
c  /,/ {text}
dot  /\./ {text}
sc /;/ {text}
lbr /\[/ {text}
rbr /\]/ {text}

/[ \t\r\n]/
/?\/\*.*\*\//
/\/\/[^\n]*\n/

%%

%top {
from parserTypes import *
}

S : Class %eof { _1 }
  ;

Class
  : class Identifier lb ClassDef rb { Class(_2, _4) }
  ;

ClassDef
  : PropDefs MethodDefs { (_1, _2) }
  ;

PropDefs
  :                   { [] }
  | PropDef PropDefs  { [_1] + _2 }
  ;

PropDef
  : propType Type Identifiers sc { PropDef(_1, _2, _3) }
  ;

MethodDefs
  :                       { [] }
  | MethodDef MethodDefs  { [_1] + _2 }
  ;

MethodDef
  : methodCategory ReturnType Identifier lp Parameters rp
    lb MethodBody rb { MethodDef(_1, _2, _3, _5, _8) }
  ;

Parameters
  :             { [] }
  | Parameters1 { _1 }
  ;

Parameters1
  : Parameter Parameters1Rest  { [_1, *_2] }
  ;

Parameters1Rest
  : c Parameters1 { _2 }
  | { [] }
  ;

Parameter
  : Type Identifier { Parameter(_1, _2) }
  ;

Identifiers
  : Identifier IdentifiersRest { [_1, *_2] }
  ;

IdentifiersRest
  : c Identifiers { _2 }
  | { [] }
  ;

ReturnType
  : Type { _1 }
  | void { PrimType("void") }
  ;

Type
  : primType   { PrimType(_1) }
  | Identifier { _1 }
  ;

MethodBody
  : LocalDefs Statements { Body(_1, _2) }
  ;

LocalDefs
  :                    { [] }
  | LocalDef sc LocalDefs { [_1] + _3 }
  ;

LocalDef
  : var Type Identifiers { LocalDef(_2, _3) }
  ;

Statements
  : { [] }
  | Statement Statements { [_1] + _2 }
  ;

Statement
  : if lp Expr rp lb Statements rb ElseBlock { IfStmt(_3, _6, _8) }
  | while lp Expr rp lb Statements rb { WhileStmt(_3, _6) }
  | do Call sc { DoStmt(_2) }
  | let ArrayExpr equals Expr sc { LetStmt(_2, _4) }
  | return ExprOrNothing sc { ReturnStmt(_2) }
  ;

ExprOrNothing
  : Expr { _1 }
  | { None }
  ;

ArrayExpr
  : Identifier Arr { _2(_1) }
  ;

Arr
  : lbr Expr rbr  { lambda x,_2=_2: ArrayExpr(x, _2) }
  | MethodRest lp Arguments rp { lambda x,_1=_1,_3=_3: Call([x, *_1], _3) }
  | { lambda x: x }
  ;

Identifier
  : identifier { Identifier(_1) }
  ;

Expr : Expr1 Expr2 { _2(_1) }
     ;

Expr1
  : primVal    { Term(PrimVal(_1)) }
  | ArrayExpr  { Term(_1) }
  | %left5 not Expr1   { Not(_2) }
  | %left5 minus Expr1 { Neg(_2) }
  | lp Expr rp { Parens(_2) }
  | integerConstant { Term(IntConst(_1)) }
  | stringConstant  { Term(StrConst(_1)) }
  ;

Expr2
  :             { lambda x: x }
  | binOp Expr  { lambda x,_1=_1,_2=_2: BinOp(_1,  x, _2) }
  | equals Expr { lambda x,_2=_2: BinOp('=', x, _2) }
  | minus Expr  { lambda x,_2=_2: BinOp('-', x, _2) }
  ;

Call
  : MethodChain lp Arguments rp { Call(_1, _3) }
  ;

MethodChain
  : Identifier MethodRest                { [_1, *_2] }
  ;

MethodRest
  : dot MethodChain { _2 }
  | { [] }
  ;

Arguments
  :            { [] }
  | Arguments1 { _1 }
  ;

Arguments1
  : Expr ArgumentsRest { [_1, *_2] }
  ;

ArgumentsRest
  : c Arguments1 { _2 }
  | { [] }
  ;

ElseBlock
  : else lb Statements rb { _3 }
  |                       { None }
  ;
