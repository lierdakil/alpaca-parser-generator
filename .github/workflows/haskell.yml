name: Haskell CI

on: [push]

jobs:
  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        ghcver: ["8.6"]
    steps:
    - uses: actions/checkout@v2
    - name: Setup GHC
      run: |
        brew bundle --file=osx/Brewfile
    - uses: actions/cache@v1
      id: cache
      with:
        path: .cabal-store
        key: ${{ runner.os }}-${{ hashFiles('parser-generator.cabal') }}
    - name: Cabal update
      run: |
        export PATH="/usr/local/opt/ghc@${{matrix.ghcver}}/bin:$PATH"
        cabal --store-dir=".cabal-store" v2-update
    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        mkdir bin
        export PATH="/usr/local/opt/ghc@${{matrix.ghcver}}/bin:$PWD/.cabal-store/bin:$PATH"
        cabal --store-dir="$PWD/.cabal-store" v2-install --installdir="$PWD/.cabal-store/bin" alex
        cabal --store-dir="$PWD/.cabal-store" v2-install --installdir="$PWD/.cabal-store/bin" happy
        cabal --store-dir=".cabal-store" v2-build --only-dependencies --enable-tests
    - name: Build
      run: |
        export PATH="/usr/local/opt/ghc@${{matrix.ghcver}}/bin:$PWD/.cabal-store/bin:$PATH"
        cabal --store-dir=".cabal-store" v2-build
    - name: Copy binary
      shell: bash
      run: find dist-newstyle -type f -perm +100 -name alpaca -exec cp {} ./ \;
    - name: Package artifact
      shell: bash
      run: |
        upx --best alpaca
        mkdir parser-generator-macos
        mv alpaca parser-generator-macos
    - uses: actions/upload-artifact@v1
      with:
        name: macos-build
        path: parser-generator-macos

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        ghcver: ["8.6.5"]
    steps:
    - name: Get GHC version
      run: |
        $BinGhcPath = Join-Path $env:ChocolateyInstall "lib\ghc.${{matrix.ghcver}}\tools\ghc-${{matrix.ghcver}}\bin\"
        echo "$BinGhcPath"
        echo "::add-path::$BinGhcPath"
    - name: Check GHC version
      shell: bash
      run: |
        [ "$(ghc --numeric-version)" == "${{matrix.ghcver}}" ]
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      id: cache
      with:
        path: .cabal-store
        key: ${{ runner.os }}-${{matrix.ghcver}}-${{ hashFiles('parser-generator.cabal') }}
    - name: Cabal init/update
      run: |
        $store = Join-Path $pwd ".cabal-store"
        cabal user-config init --augment="store-dir: $store" --augment="jobs: 1"
        cabal v2-update
    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: cabal v2-build --only-dependencies --enable-tests
    - name: Build
      run: |
        mkdir bin
        $Env:Path += ";$pwd\\bin"
        cabal v2-install --install-method=copy --installdir="$pwd\\bin" alex
        cabal v2-install --install-method=copy --installdir="$pwd\\bin" happy
        cabal v2-build
    - name: Copy binary
      shell: bash
      run: find dist-newstyle -type f -name alpaca.exe -exec cp {} ./ \;
    - name: Package artifact
      shell: bash
      run: |
        7z a "alpaca.exe.xz" alpaca.exe
        mkdir parser-generator-windows
        mv alpaca.exe.xz parser-generator-windows
    - uses: actions/upload-artifact@v1
      with:
        name: windows-build
        path: ./parser-generator-windows

  release:
    needs: [windows, macos]
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v1
      with:
        name: macos-build
    - uses: actions/download-artifact@v1
      with:
        name: windows-build
    - name: Unpack assets
      run: |
        unxz windows-build/alpaca.exe.xz
    - name: Repack assets
      run: |
        mkdir assets
        tar cJf assets/parser-generator-macos-${{github.sha}}.tar.xz -C macos-build parser-generator
        7z a assets/parser-generator-windows-${{github.sha}}.7z windows-build/alpaca.exe
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          ${{ steps.get_version.outputs.version }}
    - name: Upload Release Asset macOS
      if: contains(github.ref, 'tags/v')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./assets/parser-generator-macos-${{github.sha}}.tar.xz
        asset_name: parser-generator-macOS.tar.xz
        asset_content_type: application/x-xz-compressed-tar
    - name: Upload Release Asset Windows
      if: contains(github.ref, 'tags/v')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./assets/parser-generator-windows-${{github.sha}}.7z
        asset_name: parser-generator-Windows.7z
        asset_content_type: application/x-7z-compressed
