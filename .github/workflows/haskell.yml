name: Haskell CI

on: [push]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
        - os: ubuntu-latest
          container: 'lierdakil/alpine-haskell:8.8.4-pwsh'
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    steps:
    - uses: actions/checkout@v2
    - name: Copy build config
      if: runner.os == 'Linux'
      run: cp misc/static-build-cabal-config ./cabal.project.local
    - uses: actions/setup-haskell@v1
      if: runner.os != 'Linux'
      with:
        ghc-version: '8.8.4'
        cabal-version: '3.2'
    - uses: actions/cache@v2
      id: cache
      with:
        path: .cabal-store
        key: ${{ runner.os }}-${{ hashFiles('alpaca-parser-generator.cabal') }}-a
    - name: Cabal init
      shell: pwsh
      run: |
        $store = Join-Path $pwd ".cabal-store"
        $install = Join-Path $pwd "install"
        New-Item -ItemType Directory -Force "$store"
        New-Item -ItemType Directory -Force "$install"
        cabal user-config init --force --augment="store-dir: $store" `
          --augment="overwrite-policy: always" `
          --augment="install-method: copy" `
          --augment="installdir: $install"
        $bindir = Join-Path $store "bin"
        Write-Output "::add-path::$bindir"
    - name: Cabal update
      run: cabal v2-update
    - name: Install dependencies
      run: |
        cabal v2-install --installdir=".cabal-store/bin" alex
        cabal v2-install --installdir=".cabal-store/bin" happy
        cabal v2-build --only-dependencies --enable-tests
    - name: Build
      run: cabal v2-install
    - uses: actions/upload-artifact@v2
      with:
        name: build-${{ runner.os }}
        path: install

  release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      name: Download all artifacts
    - name: Repack assets
      run: |
        mkdir assets
        tar cvJf assets/alpaca-parser-generator-macOS.tar.xz -C build-macOS alpaca
        tar cvJf assets/alpaca-parser-generator-Linux.tar.xz -C build-Linux alpaca
        7z a assets/alpaca-parser-generator-Windows.7z build-Windows/alpaca.exe
    - uses: actions/upload-artifact@v2
      with:
        name: release-assets
        path: assets
    - name: Create release
      if: contains(github.ref, 'tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -x
        assets=()
        for asset in assets/*; do
          assets+=("-a" "$asset")
        done
        tag_name="${GITHUB_REF##*/}"
        hub release create "${assets[@]}" -m "$tag_name" "$tag_name"
